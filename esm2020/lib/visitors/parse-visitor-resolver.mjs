import { RecursiveAstVisitor } from '../angular';
import * as util from '../util';
import { BinaryOperations } from '../util/binary-operations';
export class ParseVisitorResolver extends RecursiveAstVisitor {
    constructor(pipes) {
        super();
        this.pipes = pipes;
    }
    ;
    visitBinary(ast, context) {
        const execFn = BinaryOperations.get(ast.operation);
        if (!execFn) {
            throw new Error(`Parse ERROR: on visitBinary, unknown operator ${ast.operation}`);
        }
        return execFn(ast.left.visit(this, context), ast.right.visit(this, context));
    }
    // TODO
    visitChain(ast, context) {
        return this.visitAll(ast.expressions, context);
    }
    visitConditional(ast, context) {
        if (ast.condition.visit(this, context)) {
            return ast.trueExp.visit(this, context);
        }
        else if (util.isPresent(ast.falseExp)) {
            return ast.falseExp.visit(this, context);
        }
        return null;
    }
    visitPipe(ast, context) {
        const pipe = this.pipes.get(ast.name);
        if (!pipe) {
            throw new Error(`pipe ${ast.name} not found.`);
        }
        if (!pipe.transform) {
            throw new Error(`Parse ERROR: on visitPipe, transform method doesn't exist on pipe ${ast.name}.`);
        }
        const value = ast.exp.visit(this, context);
        const pipeArgs = this.visitAll(ast.args, context);
        pipeArgs.unshift(value);
        return pipe.transform.apply(null, pipeArgs);
    }
    // TODO
    visitFunctionCall(ast, context) {
        const target = ast.target.visit(this, context);
        if (!util.isFunction(target)) {
            throw new Error(`Parse ERROR: on visitFunctionCall, target is not a function.`);
        }
        const args = this.visitAll(ast.args, context);
        return target.apply(target, args);
    }
    visitImplicitReceiver(ast, context) {
        return context;
    }
    visitInterpolation(ast, context) {
        return this.visitAll(ast.expressions, context)[0];
    }
    visitKeyedRead(ast, context) {
        const obj = ast.obj.visit(this, context);
        const key = ast.key.visit(this, context);
        return obj[key];
    }
    visitKeyedWrite(ast, context) {
        const obj = ast.obj.visit(this, context);
        const key = ast.key.visit(this, context);
        const value = ast.value.visit(this, context);
        obj[key] = value;
        return null;
    }
    visitLiteralArray(ast, context) {
        return this.visitAll(ast.expressions, context);
    }
    visitLiteralMap(ast, context) {
        const result = {};
        const keys = ast.keys;
        const values = this.visitAll(ast.values, context);
        for (let i = 0, length = keys.length; i < length; i++) {
            result[keys[i]] = values[i];
        }
        return result;
    }
    visitLiteralPrimitive(ast, context) {
        return ast.value;
    }
    visitMethodCall(ast, context) {
        const receiver = ast.receiver.visit(this, context);
        if (!util.isJsObject(receiver)) {
            throw new Error(`Parse ERROR: on visitMethodCall, invalid method receiver.`);
        }
        const method = receiver[ast.name];
        if (!util.isFunction(method)) {
            throw new Error(`Parse ERROR: on visitMethodCall, method ${ast.name} doesn't exist on receiver.`);
        }
        const args = this.visitAll(ast.args, context);
        return method.apply(receiver, args);
    }
    visitPrefixNot(ast, context) {
        return ast.expression.visit(this, context);
    }
    visitPropertyRead(ast, context) {
        const receiver = ast.receiver.visit(this, context);
        if (!util.isJsObject(receiver)) {
            throw new Error(`Parse ERROR: on visitPropertyRead, invalid property receiver.`);
        }
        return receiver[ast.name];
    }
    visitPropertyWrite(ast, context) {
        const receiver = ast.receiver.visit(this, context);
        if (!util.isJsObject(receiver)) {
            throw new Error(`Parse ERROR: on visitPropertyRead, invalid property receiver.`);
        }
        receiver[ast.name] = ast.value.visit(this, context);
        return null;
    }
    visitSafePropertyRead(ast, context) {
        const receiver = ast.receiver.visit(this, context);
        if (!util.isJsObject(receiver)) {
            throw new Error(`Parse ERROR: on visitSafePropertyRead, invalid property receiver.`);
        }
        return receiver[ast.name];
    }
    visitSafeMethodCall(ast, context) {
        const receiver = ast.receiver.visit(this, context);
        if (!util.isJsObject(receiver)) {
            throw new Error(`Parse ERROR: on visitSafeMethodCall, invalid method receiver.`);
        }
        const method = receiver[ast.name];
        if (!util.isFunction(method)) {
            throw new Error(`Parse ERROR: on visitSafeMethodCall, method ${ast.name} doesn't exist on receiver.`);
        }
        const args = this.visitAll(ast.args, context);
        return method.apply(receiver, args);
    }
    visitAll(asts, context) {
        return asts.map(ast => ast.visit(this, context));
    }
    visitQuote(ast, context) {
        throw new Error(`Parse ERROR: on visitQuote, quote expression not allowed.`);
    }
}
//# sourceMappingURL=data:application/json;base64,