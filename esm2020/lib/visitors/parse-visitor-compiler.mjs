import { RecursiveAstVisitor } from '../angular';
import { compileToJSON } from '../util';
export class ParseVisitorCompiler extends RecursiveAstVisitor {
    visitBinary(ast) {
        const left = ast.left.visit(this);
        const right = ast.right.visit(this);
        return `${left} ${ast.operation} ${right}`;
    }
    // TODO
    visitChain(ast) {
        return compileToJSON(this.visitAll(ast.expressions));
    }
    visitConditional(ast) {
        const condition = ast.condition.visit(this);
        const trueExp = ast.trueExp.visit(this);
        const falseExp = ast.falseExp.visit(this);
        return `${condition} ? ${trueExp} : ${falseExp}`;
    }
    visitPipe(ast) {
        const pipe = ast.name;
        const args = this.visitAll(ast.args);
        const value = ast.exp.visit(this);
        args.unshift(value);
        return `pipesCache.get('${pipe}').transform.apply(null, ${compileToJSON(args)})`;
    }
    // TODO
    visitFunctionCall(ast) {
        const target = ast.target.visit(this);
        const args = compileToJSON(this.visitAll(ast.args));
        return `${target}.apply(${target}, ${args})`;
    }
    visitImplicitReceiver(ast) {
        return `context`;
    }
    visitInterpolation(ast) {
        return this.visitAll(ast.expressions)[0];
    }
    visitKeyedRead(ast) {
        const obj = ast.obj.visit(this);
        const key = ast.key.visit(this);
        return `${obj}[${key}]`;
    }
    visitKeyedWrite(ast) {
        return null;
    }
    visitLiteralArray(ast) {
        return compileToJSON(this.visitAll(ast.expressions));
    }
    visitLiteralMap(ast) {
        const result = {};
        const keys = ast.keys;
        const values = this.visitAll(ast.values);
        for (let i = 0, length = keys.length; i < length; i++) {
            result[keys[i]] = values[i];
        }
        return compileToJSON(result);
    }
    visitLiteralPrimitive(ast) {
        return typeof ast.value === 'string' ? `'${ast.value}'` : ast.value;
    }
    visitMethodCall(ast) {
        const methodName = ast.name;
        const receiver = ast.receiver.visit(this);
        const args = compileToJSON(this.visitAll(ast.args));
        return `${receiver}['${methodName}'].apply(${receiver}, ${args})`;
    }
    visitPrefixNot(ast) {
        return ast.expression.visit(this);
    }
    visitPropertyRead(ast) {
        const property = ast.name;
        const receiver = ast.receiver.visit(this);
        return `${receiver}['${property}']`;
    }
    visitPropertyWrite(ast) {
        return null;
    }
    visitSafePropertyRead(ast) {
        const property = ast.name;
        const receiver = ast.receiver.visit(this);
        return `${receiver}['${property}']`;
    }
    visitSafeMethodCall(ast) {
        const methodName = ast.name;
        const receiver = ast.receiver.visit(this);
        const args = compileToJSON(this.visitAll(ast.args));
        return `${receiver}['${methodName}'].apply(${receiver}, ${args})`;
    }
    visitAll(asts) {
        return asts.map(ast => ast.visit(this));
    }
    visitQuote(ast) {
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,